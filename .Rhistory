R.Version()
install.packages('devtools')
R.Version()
install.packages('devtools')
R.Version()
install.packages('devtools')
install.packages('forecast')
install.packages('devtools')
library(devtools)
install_github("robjhyndman/forecast")
install.packages('forecast')
library(forecast)
# ETS forecasts
fit <- ets(USAccDeaths)
plot(forecast(fit))
# Automatic ARIMA forecasts
fit <- auto.arima(WWWusage)
plot(forecast(fit, h=20))
# ARFIMA forecasts
library(fracdiff)
x <- fracdiff.sim( 100, ma=-.4, d=.3)$series
fit <- arfima(x)
plot(forecast(fit, h=30))
# Forecasting with STL
tsmod <- stlm(USAccDeaths, modelfunction=ar)
plot(forecast(tsmod, h=36))
plot(stlf(AirPassengers, lambda=0))
decomp <- stl(USAccDeaths,s.window="periodic")
plot(forecast(decomp))
# TBATS forecasts
fit <- tbats(USAccDeaths, use.parallel=FALSE)
plot(forecast(fit))
taylor.fit <- tbats(taylor)
plot(forecast(taylor.fit))
install.packages('caret')
source("http://bioconductor.org/biocLite.R")
bioclite('pcaMethod')
bioclite()
library(BiocInstaller)
bioclite{'pcaMethod'}
bioclite('pcaMethod')
biocLite('pcaMethod')
par(mfrow=c(2,2))
plot(hsales,xlab="Year",ylab="Monthly housing sales (millions)")
fit <- ets(USAccDeaths)
plot(forecast(fit))
dev.off
plot.new()
plot.new()
fit <- ets(USAccDeaths)
plot(forecast(fit))
plot.new()
fit <- ets(USAccDeaths)
plot(forecast(fit))
dev.off()
fit <- ets(USAccDeaths)
plot(forecast(fit))
fit <- auto.arima(WWWusage)
plot(forecast(fit, h=20))
library(fracdiff)
x <- fracdiff.sim( 100, ma=-.4, d=.3)$series
fit <- arfima(x)
plot(forecast(fit, h=30))
tsmod <- stlm(USAccDeaths, modelfunction=ar)
plot(forecast(tsmod, h=36))
plot(stlf(AirPassengers, lambda=0))
decomp <- stl(USAccDeaths,s.window="periodic")
plot(forecast(decomp))
fit <- tbats(USAccDeaths, use.parallel=FALSE)
plot(forecast(fit))
taylor.fit <- tbats(taylor)
plot(forecast(taylor.fit))
par(mfrow=c(2,2))
plot(hsales,xlab="Year",ylab="Monthly housing sales (millions)")
par(mfrow=c(2,2))
hsales
library(forecast)
hsales
plot(ustreas,xlab="Day",ylab="US treasury bill contracts")
plot(elec,xlab="Year",ylab="Australian monthly electricity production")
plot(diff(dj),xlab="Day",ylab="Daily change in Dow Jones index")
fit <- stl(elecequip, s.window=5)
monthplot(fit$time.series[,"seasonal"], main="", ylab="Seasonal")
install.packages("rticles")
library(RQDA)
install.packages("RQDA")
devtools::install_github("massimoaria/bibliometrix")
biblioshiny()
library('bibliometrix')
biblioshiny()
D <- readFiles("data.csv)
D <- readFiles("data.csv")
D
library('bibliometrix')
D <- readFiles("data.csv")
setwd("~/Downloads/kalawabahmelanda") #change to your working folder
library(tidyverse)
# Loading data
data_dim <- read.csv("datasets-dimensions.csv")
data_lens <- read.csv("datasets-lens.csv")
# Scatter plot
ggplot(data_dim, aes(x=Sum_data, y=Sum_pub)) +
geom_point() +
labs(y='Sum of publication', x='Sum of datasets') +
geom_text(aes(label = Fields), size=2, vjust=-1, hjust=0)
ggplot(data_lens, aes(x=Sum_data, y=Works_cited)) +
geom_point() +
labs(y='Works cited', x='Sum of datasets') +
geom_text(aes(label = Fields), size=2, vjust=-1, hjust=0)
# Scatter plot
ggplot(data_dim, aes(x=Sum_data, y=Sum_pub)) +
geom_point() +
labs(y='Sum of publication', x='Sum of datasets') +
geom_text(aes(label = Fields), size=2, vjust=-1, hjust=0) +
theme_tufte()
# Scatter plot
ggplot(data_dim, aes(x=Sum_data, y=Sum_pub)) +
geom_point() +
labs(y='Sum of publication', x='Sum of datasets') +
geom_text(aes(label = Fields), size=2, vjust=-1, hjust=0) +
theme_bw()
ggplot(data_lens, aes(x=Sum_data, y=Works_cited)) +
geom_point() +
labs(y='Works cited', x='Sum of datasets') +
geom_text(aes(label = Fields), size=2, vjust=-1, hjust=0) +
theme_bw()
# Scatter plot
ggplot(data_dim, aes(x=Sum_data, y=Sum_pub)) +
geom_point() +
labs(y='Sum of publication', x='Sum of datasets') +
geom_text(aes(label = Fields), size=2, vjust=-1, hjust=0) +
theme_bw() +
ggtitle("Sum of datasets vs sum of publications (Dimensions database")
# Scatter plot
ggplot(data_dim, aes(x=Sum_data, y=Sum_pub)) +
geom_point() +
labs(y='Sum of publication', x='Sum of datasets') +
geom_text(aes(label = Fields), size=2, vjust=-1, hjust=0) +
theme_bw() +
ggtitle("Sum of datasets vs sum of publications (Dimensions database)")
ggplot(data_lens, aes(x=Sum_data, y=Works_cited)) +
geom_point() +
labs(y='Works cited', x='Sum of datasets') +
geom_text(aes(label = Fields), size=2, vjust=-1, hjust=0) +
theme_bw() +
ggtitle("Sum of datasets vs Works cited (Lens database)")
install.packages("plotly")
library(plotly)
## package for converting plot to html
install.packages("htmlwidgets")
install.packages("htmlwidgets")
library(htmlwidgets)
# Scatter plot
## making dimplot.pdf
dimplot <- ggplot(data_dim, aes(x=Sum_data, y=Sum_pub)) +
geom_point() +
labs(y='Sum of publication', x='Sum of datasets') +
geom_text(aes(label = Fields), size=2, vjust=-1, hjust=0) +
theme_bw() +
ggtitle("Sum of datasets vs sum of publications (Dimensions database)")
print(dimplot)
plotlydim <- ggploty(dimplot)
plotlydim <- ggplotly(dimplot)
savedim <- dimplot.html
htmlwidgets::saveWidget(as_widget(plotlydim), selfcontained = TRUE, file = "dimplot.html")
## making lensplot.pdf
lensplot <- ggplot(data_lens, aes(x=Sum_data, y=Works_cited)) +
geom_point() +
labs(y='Works cited', x='Sum of datasets') +
geom_text(aes(label = Fields), size=2, vjust=-1, hjust=0) +
theme_bw() +
ggtitle("Sum of datasets vs Works cited (Lens database)")
print(lensplot)
plotlydim <- ggplotly(lensplot)
plotlylens <- ggplotly(lensplot)
plotlydim <- ggplotly(dimplot)
htmlwidgets::saveWidget(as_widget(plotlylens), selfcontained = TRUE, file = "plots/dimplot.html")
setwd("~/Downloads/kalawabahmelanda") #change to your working folder
htmlwidgets::saveWidget(as_widget(plotlylens), selfcontained = TRUE, file = "/plots/dimplot.html")
htmlwidgets::saveWidget(as_widget(plotlylens), selfcontained = TRUE, file = "plots/dimplot.html")
htmlwidgets::saveWidget(as_widget(plotlylens), selfcontained = TRUE, file = "plots/dimplot.html")
htmlwidgets::saveWidget(as_widget(plotlylens), selfcontained = TRUE, file = "~/plots/dimplot.html")
htmlwidgets::saveWidget(as_widget(plotlylens), selfcontained = TRUE, file = "/plots/dimplot.html")
htmlwidgets::saveWidget(as_widget(plotlylens), selfcontained = TRUE, file = "plots/dimplot.html")
htmlwidgets::saveWidget(as_widget(plotlylens), selfcontained = TRUE, file = "lensplot.html")
